package com.telegrambotapi.service;

import com.telegrambotapi.adapter.AIServiceException;
import com.telegrambotapi.strategy.ResponseContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

/**
 * Servicio para proporcionar asesor√≠a de ventas basada en an√°lisis de conversaciones
 * entre clientes y vendedores usando IA.
 */
@Service
public class SalesAdvisorService {
    
    private static final Logger logger = LoggerFactory.getLogger(SalesAdvisorService.class);
    
    @Autowired
    private ResponseContext responseContext;
    
    // Estad√≠sticas del servicio
    private final Map<String, Integer> advisoryCount = new HashMap<>();
    
    /**
     * Analiza una conversaci√≥n de ventas y proporciona consejos para rechazar una devoluci√≥n
     * @param conversation la conversaci√≥n entre cliente y vendedor
     * @param advisorChatId el ID del chat donde se enviar√° el consejo
     * @return consejo para rechazar la devoluci√≥n
     */
    public String analyzeForRefundRejection(String conversation, String advisorChatId) {
        logger.info("Analizando conversaci√≥n para rechazo de devoluci√≥n");
        
        try {
            String advice = responseContext.executeStrategy(
                ResponseContext.StrategyType.REFUND_REJECTION, conversation);
            
            incrementAdvisoryCount("refund_rejection");
            logAdvice(advisorChatId, "Rechazo de Devoluci√≥n", conversation);
            
            return formatAdvice("üö´ ESTRATEGIA: Rechazo de Devoluci√≥n", advice);
            
        } catch (AIServiceException e) {
            logger.error("Error analizando para rechazo de devoluci√≥n: {}", e.getMessage());
            return "‚ùå Error: No pude analizar la conversaci√≥n para rechazo de devoluci√≥n. " +
                   "Verifica que el servicio de IA est√© disponible.";
        }
    }
    
    /**
     * Analiza una conversaci√≥n de ventas y proporciona consejos para upselling
     * @param conversation la conversaci√≥n entre cliente y vendedor
     * @param advisorChatId el ID del chat donde se enviar√° el consejo
     * @return consejo para realizar upselling
     */
    public String analyzeForUpselling(String conversation, String advisorChatId) {
        logger.info("Analizando conversaci√≥n para upselling");
        
        try {
            String advice = responseContext.executeStrategy(
                ResponseContext.StrategyType.UPSELLING, conversation);
            
            incrementAdvisoryCount("upselling");
            logAdvice(advisorChatId, "Upselling", conversation);
            
            return formatAdvice("üìà ESTRATEGIA: Upselling", advice);
            
        } catch (AIServiceException e) {
            logger.error("Error analizando para upselling: {}", e.getMessage());
            return "‚ùå Error: No pude analizar la conversaci√≥n para upselling. " +
                   "Verifica que el servicio de IA est√© disponible.";
        }
    }
    
    /**
     * Analiza una conversaci√≥n de ventas y proporciona consejos para motivar la compra
     * @param conversation la conversaci√≥n entre cliente y vendedor
     * @param advisorChatId el ID del chat donde se enviar√° el consejo
     * @return consejo para motivar la compra
     */
    public String analyzeForPurchaseMotivation(String conversation, String advisorChatId) {
        logger.info("Analizando conversaci√≥n para motivaci√≥n de compra");
        
        try {
            String advice = responseContext.executeStrategy(
                ResponseContext.StrategyType.PURCHASE_MOTIVATION, conversation);
            
            incrementAdvisoryCount("purchase_motivation");
            logAdvice(advisorChatId, "Motivaci√≥n de Compra", conversation);
            
            return formatAdvice("üí™ ESTRATEGIA: Motivaci√≥n de Compra", advice);
            
        } catch (AIServiceException e) {
            logger.error("Error analizando para motivaci√≥n de compra: {}", e.getMessage());
            return "‚ùå Error: No pude analizar la conversaci√≥n para motivaci√≥n de compra. " +
                   "Verifica que el servicio de IA est√© disponible.";
        }
    }
    
    /**
     * Proporciona an√°lisis general de una conversaci√≥n de ventas
     * @param conversation la conversaci√≥n entre cliente y vendedor
     * @param advisorChatId el ID del chat donde se enviar√° el an√°lisis
     * @return an√°lisis general con recomendaciones
     */
    public String provideGeneralAnalysis(String conversation, String advisorChatId) {
        logger.info("Proporcionando an√°lisis general de conversaci√≥n");
        
        StringBuilder analysis = new StringBuilder();
        analysis.append("üìä AN√ÅLISIS GENERAL DE VENTAS\n\n");
        
        // An√°lisis b√°sico
        analysis.append("üìù Resumen de la conversaci√≥n:\n");
        analysis.append("‚Ä¢ Longitud: ").append(conversation.length()).append(" caracteres\n");
        analysis.append("‚Ä¢ L√≠neas de di√°logo: ").append(conversation.split("\n").length).append("\n\n");
        
        // Sugerencias generales
        analysis.append("üí° Recomendaciones generales:\n");
        analysis.append("‚Ä¢ Usa las estrategias espec√≠ficas para an√°lisis detallado\n");
        analysis.append("‚Ä¢ Comandos disponibles:\n");
        analysis.append("  - /rechazar_devolucion - Para rechazar devoluciones\n");
        analysis.append("  - /upselling - Para t√©cnicas de upselling\n");
        analysis.append("  - /motivar_compra - Para motivar la compra\n\n");
        
        analysis.append("‚è∞ An√°lisis realizado: ");
        analysis.append(LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")));
        
        logAdvice(advisorChatId, "An√°lisis General", conversation);
        
        return analysis.toString();
    }
    
    /**
     * Formatea un consejo con un encabezado y timestamp
     */
    private String formatAdvice(String header, String advice) {
        StringBuilder formatted = new StringBuilder();
        formatted.append(header).append("\n");
        formatted.append("‚è∞ ").append(LocalDateTime.now().format(
            DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))).append("\n\n");
        formatted.append(advice);
        formatted.append("\n\nüìã Consejo generado por IA");
        
        return formatted.toString();
    }
    
    /**
     * Incrementa el contador para un tipo espec√≠fico de asesor√≠a
     */
    private void incrementAdvisoryCount(String type) {
        advisoryCount.put(type, advisoryCount.getOrDefault(type, 0) + 1);
    }
    
    /**
     * Registra el consejo proporcionado para auditor√≠a
     */
    private void logAdvice(String advisorChatId, String type, String conversation) {
        logger.info("Consejo '{}' proporcionado al chat {}. Conversaci√≥n de {} caracteres", 
                   type, advisorChatId, conversation.length());
    }
    
    /**
     * Obtiene estad√≠sticas del servicio de asesor√≠a
     */
    public Map<String, Object> getStatistics() {
        Map<String, Object> stats = new HashMap<>();
        stats.put("totalConsejos", advisoryCount.values().stream()
            .mapToInt(Integer::intValue).sum());
        stats.put("consejosPorTipo", new HashMap<>(advisoryCount));
        stats.put("serviciosDisponibles", getAvailableServices());
        stats.put("ultimaActualizacion", LocalDateTime.now().format(
            DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")));
        
        return stats;
    }
    
    /**
     * Verifica qu√© servicios est√°n disponibles
     */
    private Map<String, Boolean> getAvailableServices() {
        Map<String, Boolean> services = new HashMap<>();
        services.put("rechazoDevolucion", responseContext.isStrategyAvailable(
            ResponseContext.StrategyType.REFUND_REJECTION));
        services.put("upselling", responseContext.isStrategyAvailable(
            ResponseContext.StrategyType.UPSELLING));
        services.put("motivacionCompra", responseContext.isStrategyAvailable(
            ResponseContext.StrategyType.PURCHASE_MOTIVATION));
        
        return services;
    }
    
    /**
     * Verifica si el servicio de asesor√≠a est√° completamente disponible
     */
    public boolean isServiceAvailable() {
        return responseContext.isStrategyAvailable(ResponseContext.StrategyType.REFUND_REJECTION) &&
               responseContext.isStrategyAvailable(ResponseContext.StrategyType.UPSELLING) &&
               responseContext.isStrategyAvailable(ResponseContext.StrategyType.PURCHASE_MOTIVATION);
    }
    
    /**
     * Valida el formato de una conversaci√≥n
     */
    public boolean isValidConversation(String conversation) {
        return conversation != null && 
               !conversation.trim().isEmpty() && 
               conversation.length() >= 50 && // m√≠nimo 50 caracteres
               conversation.length() <= 10000; // m√°ximo 10000 caracteres
    }
    
    /**
     * Proporciona ayuda sobre c√≥mo usar el servicio
     */
    public String getUsageHelp() {
        return "üîß AYUDA - Asesor de Ventas\n\n" +
               "üìù C√≥mo usar:\n" +
               "1. Copia la conversaci√≥n entre cliente y vendedor\n" +
               "2. Usa uno de estos comandos seguido de la conversaci√≥n:\n\n" +
               "üö´ /rechazar_devolucion [conversaci√≥n]\n" +
               "   - Consejos para rechazar devoluciones diplom√°ticamente\n\n" +
               "üìà /upselling [conversaci√≥n]\n" +
               "   - Estrategias para vender productos mejores\n\n" +
               "üí™ /motivar_compra [conversaci√≥n]\n" +
               "   - T√©cnicas para motivar la compra\n\n" +
               "üìä /analisis_general [conversaci√≥n]\n" +
               "   - An√°lisis general con recomendaciones\n\n" +
               "‚ö†Ô∏è Requisitos:\n" +
               "‚Ä¢ La conversaci√≥n debe tener entre 50 y 10,000 caracteres\n" +
               "‚Ä¢ Incluye tanto mensajes del cliente como del vendedor\n" +
               "‚Ä¢ Usa formato: 'Cliente: mensaje' y 'Vendedor: mensaje'";
    }
}